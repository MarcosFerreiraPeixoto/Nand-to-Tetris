// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	// First Mux to define wich value is the input for the A register
	Mux16(a = instruction, b = outALU, sel = instruction[15], out = toAregister);
	
	// Determing if the A register is Loaded or not.
	Not(in = instruction[15], out = notcontrol);
	Or(a = instruction[5], b = notcontrol, out = loadA);
	ARegister(in = toAregister, load = loadA, out = outAregister, out[0..14] = addressM[0..14]);
	
	// Mux to define if we use the A register value or the M RAM value in the ALU
	And(a = instruction[12], b = instruction[15], out = selmuxyALU);
	Mux16(a = outAregister, b = inM, sel = selmuxyALU, out = yALU);
	
	// Creating and loading the D register
	And(a = instruction[4], b = instruction[15], out = loadD);
	DRegister(in = outALU, load = loadD, out = xALU);
	
	// Defining the ALU and it's inputs
	And(a = instruction[15], b = instruction[11], out = c1);
	And(a = instruction[15], b = instruction[10], out = c2);
	And(a = instruction[15], b = instruction[9], out = c3);
	And(a = instruction[15], b = instruction[8], out = c4);
	And(a = instruction[15], b = instruction[7], out = c5);
	And(a = instruction[15], b = instruction[6], out = c6);
	
	ALU(zx = c1 , nx = c2, zy = c3, ny = c4, f = c5, no = c6, x = xALU, y = yALU, out = outALU, out = outM, zr = zrALU, ng = ngALU);
	
	// Outputing the load value for the RAM
	And(a = instruction[3], b = instruction[15], out = writeM);
	
	// Defining the PC load
	And(a = instruction[2], b = ngALU, out = j1andng);
	And(a = instruction[1], b = zrALU, out = j2andzr);
	Not(in = ngALU, out = notngALU);
	Not(in = zrALU, out = notzrALU);
	And(a = notngALU, b= notzrALU, out = pos);
	And(a = instruction[0], b= pos, out = j3andnotng);
	Or(a = j1andng, b = j2andzr, out = jump1);
	Or(a = jump1, b = j3andnotng, out = jump);
	And(a = jump, b = instruction[15], out = loadPC);
	
	PC(in = outAregister, load = loadPC, inc = true, reset = reset, out[0..14] = pc[0..14]);
}