// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
	//Zero the x input if zx == 1
    Mux16 (a=x, b[0..15]=false, sel = zx, out = xzx);
	//Calculating Not(x)
	Not16 (in=xzx, out= notxzx);
	//negate the x input if nx == 1
	Mux16 (a=xzx, b=notxzx, sel = nx, out = xzxnx);
	
	//Zero the y input if zy == 1
	Mux16 (a=y, b[0..15]=false, sel = zy, out = yzy);
	//Computing Not(y)
	Not16 (in=yzy, out= notyzy);
	//negate the y input if ny == 1
	Mux16 (a=yzy, b=notyzy, sel = ny, out = yzyny);
	
	//Adding x and y
	Add16 (a=xzxnx, b=yzyny, out=sumxy);
	//Computing x and y
	And16 (a=xzxnx, b=yzyny, out=xandy);
	//Computes out = x + y (if 1) or x & y (if 0)
	Mux16 (a=xandy, b=sumxy, sel=f, out= fxy);
	
	//Computing Not(fxy)
	Not16(in=fxy, out=notfxy);
	//Computes out = Not(fxy) (if 1) or fxy (if 0)
	//Separating in to halves to to avoid the error "cannot use output in internal chip part" (no recursion) later
	Mux16(a=fxy, b=notfxy, sel=no, out[0..7]=outleftpart, out[8..15]=outrightpart);
	//Outputing the anwer
	And16(a[0..7]=outleftpart, a[8..15]=outrightpart, b=true, out=out);
	
	//Checking if the first half is a 1 (checking if the number is negative)
	Or8Way(in[0..7]=outrightpart, out=ng);
	
	//Checking if out = 0
	Or8Way(in=outleftpart, out=or8wayleft);
	Or8Way(in=outrightpart, out=or8wayright);
	Or(a=or8wayleft, b=or8wayright, out=finalor);
	Not(in=finalor, out=zr);
}